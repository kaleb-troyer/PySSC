'''
Kaleb Troyer
2024-09-11

Plots the capital cost to thermal efficiency relationship
for a simple recuperated cycle and a recompression cycle. 

Data taken from SAM simulation core. 
'''

import os
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

version = '1.0'
figID   = 'f0005'

predict = False
savefig = False
display = True
path = os.path.join(os.getcwd(), "Figures and Data")
colors = sns.color_palette("mako", 5)

# SAM Simple Cycle Costs
s_eta  = np.array([0.38186722376384596, 0.39509571214508227, 0.40622333677692113, 0.41530214696801954, 0.42239232023451584, 0.4278694120717378, 0.4320105130043352, 0.4351633203077192, 0.43748968427659324, 0.43921980145520506, 0.44047830856835646, 0.44139810731862883, 0.4420586871349294, 0.44253524537104616, 0.44287538271741905, 0.44311811926027983, 0.443289553669259, 0.44341118270358254, 0.44349685232239405, 0.44355834556264123, 0.443601809397533, 0.44363215171703296, 0.4436536910746997, 0.4436689245986017, 0.4436786474098735, 0.4436786474098735])
s_cost = np.array([90.4597293945515, 89.3412794226698, 88.5531459567982, 88.21814349956018, 88.13772281865198, 88.25881679053298, 88.53590455214521, 88.9462144189377, 89.46675334635663, 90.11192416896604, 90.74950685961834, 91.42533991619074, 92.12387963385848, 92.8381811635449, 93.554873415459, 94.28169324442885, 95.00948266526709, 95.74215310982684, 96.45869119872809, 97.17737895886142, 97.89123337422878, 98.59991990665947, 99.30315891393842, 99.99958489868912, 100.69977181933346, 101.38772137649433])

# SAM Recompression Cycle Costs
r_eta  = np.array([0.3818672255863278, 0.39509770978781283, 0.40622333776623215, 0.4153021751681872, 0.42239232029214296, 0.4162807061462875, 0.4227441033318186, 0.428662795438246, 0.43376863669798754, 0.438324622507426, 0.4426317589933752, 0.4465174887263438, 0.45017337035039773, 0.4537528071140103, 0.45651113428349993, 0.4589326112611534, 0.4619076465917481, 0.4641846327265273, 0.46580977987518823, 0.4677518413711143, 0.4695390778935876, 0.47120233926910776, 0.4727189046431412, 0.4740633720310677, 0.47549749710047934, 0.47671030933268854, 0.4778162121545482, 0.478964673085156, 0.4799561318661219, 0.4809006160750894, 0.4818169498080041, 0.48264449767762985, 0.4833965929891854, 0.4840834761577209, 0.48482535032308877, 0.485421075188518, 0.48611615379284134, 0.4867068822489987, 0.4872514598743909, 0.48779977745272396, 0.4882480122665164, 0.4887262826430585, 0.4891057153294636, 0.4895984954721629, 0.4899402815818352, 0.490346361737262])
r_cost = np.array([90.45995675777819, 89.339594375152, 88.55323925106936, 88.21817579082357, 88.13778627969037, 96.08237157512679, 96.66763259178535, 96.97923708837175, 97.45894820427037, 97.69252766393598, 98.03107866457135, 98.40220954860723, 98.82876212139155, 99.22223701657795, 99.69494655841737, 100.22766684621664, 100.73257150679984, 101.27542508613162, 101.86664784165156, 102.43497632224802, 103.01683726618516, 103.60087089774301, 104.22599722820252, 104.88838024014717, 105.4853577871593, 106.13715167674236, 106.77666091432737, 107.38469935349987, 108.06562486991176, 108.70186661758893, 109.34716933154363, 110.02276652940647, 110.67661149446174, 111.35441551269774, 111.99626266717007, 112.63154995611572, 113.31234942919713, 113.9961030309206, 114.67589148463281, 115.33184450767891, 115.9820334396285, 116.67758820514322, 117.33160970575896, 117.98776687284716, 118.65818147083456, 119.31600093258535])

# CSP Esimated Total Costs by Efficiency
c_eta  = np.array([0.3, 0.3157894736842105, 0.33157894736842103, 0.34736842105263155, 0.3631578947368421, 0.3789473684210526, 0.39473684210526316, 0.4105263157894737, 0.4263157894736842, 0.4421052631578947, 0.45789473684210524, 0.4736842105263158, 0.4894736842105263, 0.5052631578947369, 0.5210526315789474, 0.5368421052631579, 0.5526315789473684, 0.5684210526315789, 0.5842105263157895, 0.6])
c_cost = np.array([486.84582902710156, 455.42660356261183, 427.63000766672167, 402.8802964279883, 380.7154215024378, 360.76064067312336, 342.7090830928193, 326.3072367157671, 311.3439727739454, 297.64214791246286, 285.0521092438838, 273.44662104226194, 262.7168652948046, 252.7692617498392, 243.52291933134535, 234.90757831750452, 226.8619371727741, 219.3322832203712, 212.27136508000024, 205.63745880428314])

# recompression out-of-simulation projections
p1 = (41.617, 96.087)
p2 = (43.993, 97.822)
x1, y1 = p1
x2, y2 = p2
p3 = (s_eta[0], y1 + (y2 - y1) * (s_eta[0] - x1) / (x2 - x1))
r_x_proj, r_y_proj = zip(*[p1, p3])

r_eta_trimmed  = []
r_cost_trimmed = []
for i, x in enumerate(r_cost): 
    if x > 93: 
        r_eta_trimmed.append(r_eta[i])
        r_cost_trimmed.append(r_cost[i])

# Simple cycle combined costs
interp_s_cost = np.interp(s_eta, c_eta, c_cost)
s_combined_cost = s_cost + interp_s_cost

# Recompression cycle combined costs
interp_r_cost = np.interp(r_eta_trimmed, c_eta, c_cost)
r_combined_cost = r_cost_trimmed + interp_r_cost

s_eta         = [x * 100 for x in s_eta]
r_eta_trimmed = [x * 100 for x in r_eta_trimmed]

plt.figure(figsize=(8, 4))
plt.subplot(1, 2, 1)
plt.plot(s_eta, s_cost, color=colors[2], label="simple cycle", zorder=5)
plt.plot(r_eta_trimmed, r_cost_trimmed, color=colors[4], label="recompression cycle", zorder=5)

if predict: 
    plt.plot([s_eta[-1], s_eta[-1]], [s_cost[-1], 121.5], color=colors[2], linestyle='--', zorder=5)
    plt.plot(r_x_proj, r_y_proj, color=colors[4], linestyle='--', zorder=5)

plt.title('Cycle Capital Costs, Only')
plt.legend()
plt.xlabel(r'$\eta_{th}$ [%]')
plt.ylabel('Cycle Capital Cost [M$]')
plt.margins(x=0)
plt.gca().set_ylim(top=121.5)
plt.grid(zorder=1)

plt.subplot(1, 2, 2)
plt.plot(s_eta, s_combined_cost, color=colors[2], label="simple cycle", zorder=5)
plt.plot(r_eta_trimmed, r_combined_cost, color=colors[4], label="recompression cycle", zorder=5)
plt.title('Combined Cycle + CSP Capital Costs')
plt.legend()
plt.xlabel(r'$\eta_{th}$ [%]')
plt.ylabel('Total Capital Cost [M$]')
plt.margins(x=0)
plt.grid(zorder=1)
plt.tight_layout()

if savefig: plt.savefig(os.path.join(path, "figures", f"{figID}_V{version}_cycle-cost-comparison.png"), dpi=300, bbox_inches='tight')
if display: plt.show()
